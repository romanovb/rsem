library(gtrendsR) # пакет для работы с Google Trends
library(forcats) # пакет для работы с факторами
library(tidyverse) # набор пакетов для преобразования и визуализации данных
library(stringr) # пакет для работы со строками
dtrend <- gtrends(c("Trello", "Slack"), time = "today+5-y")
ggplot(data=dtrend$interest_over_time) +
geom_line(mapping = aes(x=date, y=hits, color=keyword), size=1) + labs(title="Trends dynamics", x = "Year", y = "Search hits", color = "Keyword")
head(dtrend$related_queries %>% filter(keyword=="Trello") %>% select(subject, value), 10)
head(dtrend$related_queries %>% filter(keyword=="Slack") %>% select(subject, value), 10)
library(tidyverse)
library(readxl) # считывание данных в формате Excel
library(stringr) # операции со строками
# Раскомментируйте и запустите следующие команды,
# если у вас не ставится tidyverse
#library(dplyr)
#library(ggplot2)
#library(tidyr)
# Загрузить лист с именем 'data' из книги:
hotdogs <- read_excel('data/hotdogs.xlsx', sheet = 'data')
head(hotdogs, n = 5) # посмотрим первые 5 строк
?read_excel
View(hotdogs)
str(hotdogs)
dim(hotdogs)
nrow(hotdogs)
nrow(hotdogs)
ncol(hotdogs)
names(hotdogs)
names(hotdogs) <- str_to_lower(names(hotdogs))
head(hotdogs)
?head
summary(hotdogs)
# Калорийность в исходных единицах (ккал):
hotdogs$calories
?round
# Калорийность в кДж
round(hotdogs$calories * 4.184)
# ?round
# Соотношение Na и калорийности:
hotdogs$sodium_ratio = hotdogs$sodium / hotdogs$calories
head(hotdogs)
hotdogs <- mutate(hotdogs,
sodium_ratio = sodium / calories,
kilojoules = calories * 4.184)
head(hotdogs)
head(
select(hotdogs, type, sodium_ratio, kilojoules)
)
head(
select(hotdogs, -calories, -sodium)
)
# Перечисление нужных столбцов
head(
select(hotdogs, type, sodium_ratio, kilojoules)
)
# Перечисление столбцов, которые нужно убрать:
head(
select(hotdogs, -calories, -sodium)
)
# Указание последовательности смежных столбцов:
head(
select(hotdogs, type, sodium_ratio:kilojoules)
)
# Исключение последовательности смежных столбцов:
head(
select(hotdogs, -(calories:sodium))
)
high_sodium <- filter(hotdogs, sodium_ratio > 4 & type == 'Poultry')
high_sodium
summary(hotdogs$sodium)
mean(hotdogs$sodium)
mean(hotdogs$sodium, na.rm = TRUE)
filter(hotdogs, is.na(sodium) | is.na(calories)) # можно не указывать sodium_ratio, т.к. он будет пустым если в любом из этих столбцов было NA
hotdogs_complete <-
filter(hotdogs, !is.na(sodium), !is.na(calories))
# Размер исходной таблицы
nrow(hotdogs)
# Размер очищенной таблицы
nrow(hotdogs_complete)
complete.cases(hotdogs)
complete.cases(hotdogs)
complete.cases(hotdogs)
nrow(
filter(hotdogs, complete.cases(hotdogs))
)
qplot(sodium, data = hotdogs_complete,
binwidth = 50, # ширина интервала
main = 'Распределение содержания натрия в образцах',
xlab = 'мг',
ylab = 'частота')
qplot(x = "", y = sodium, data = hotdogs_complete,
geom = 'boxplot',
main = 'Распределение содержания натрия в образцах',
ylab = 'мг',
xlab = NULL)
qplot(x = type, y = sodium, data = hotdogs_complete,
geom = 'boxplot',
main = 'Распределение содержания натрия в образцах',
ylab = 'мг',
xlab = 'тип начинки')
# Нижняя граница - квантиль 2.5%
min_sodium <-
quantile(hotdogs_complete$sodium, probs = 0.025, na.rm = TRUE)
# Верхняя граница - квантиль 97.5%
max_sodium <-
quantile(hotdogs_complete$sodium, probs = 0.975, na.rm = TRUE)
min_sodium
max_sodium
hotdogs_cleaned <-
mutate(hotdogs_complete,
sodium =
ifelse(sodium > max_sodium, max_sodium,
ifelse(sodium < min_sodium, min_sodium, sodium)))
View(hotdogs_cleaned)
# Сводка
summary(hotdogs_complete$sodium)
# Ящичная диаграмма
qplot(x = "", y = sodium, data = hotdogs_complete,
geom = 'boxplot',
main = 'Распределение содержания натрия в образцах',
ylab = 'мг',
xlab = NULL)
hotdogs_cleaned <-
mutate(hotdogs_complete,
sodium =
ifelse(sodium > max_sodium, max_sodium,
ifelse(sodium < min_sodium, min_sodium, sodium)))
# Сводка
summary(hotdogs_complete$sodium)
# Ящичная диаграмма
qplot(x = "", y = sodium, data = hotdogs_complete,
geom = 'boxplot',
main = 'Распределение содержания натрия в образцах',
ylab = 'мг',
xlab = NULL)
qplot(x = "", y = sodium, data = hotdogs_cleaned,
geom = 'boxplot',
main = 'Распределение содержания натрия в образцах',
ylab = 'мг',
xlab = NULL)
# Гистограмма распределения calories
qplot(x = calories, data = hotdogs_cleaned,
main = 'Гистограмма распределения калорий',
xlab = 'Значение',
ylab = 'Частота')
# Гистограмма распределения calories
# qplot(x = "", y = ...,
#       data = ...,
#       geom = '...',
#       ...)
# Гистограмма распределения calories
qplot(x = calories, data = hotdogs_cleaned,
main = 'Гистограмма распределения калорий',
xlab = 'Значение',
ylab = 'Частота')
# Гистограмма распределения calories
qplot(x = "", y = calories,
data = hotdogs_cleaned,
geom = 'boxplot',
...)
# Гистограмма распределения calories
qplot(x = calories, data = hotdogs_cleaned,
main = 'Гистограмма распределения калорий',
xlab = 'Значение',
ylab = 'Частота')
# Гистограмма распределения calories
qplot(x = "", y = calories,
data = hotdogs_cleaned,
geom = 'boxplot',
)
# Рассчитайте медианное значение калорийности:
med_cal <- median(calories)
# Рассчитайте медианное значение калорийности:
med_cal <- median(hotdogs_cleaned$calories)
# Замените выбросы, выходящие за допустимые границы, на медиану калорийности:
# hotdogs_cleaned <-
#   mutate(...,
#          calories = ...)
# Рассчитайте медианное значение калорийности:
med_cal <- median(hotdogs_cleaned$calories)
# Замените выбросы, выходящие за допустимые границы, на медиану калорийности:
hotdogs_cleaned <-
mutate(hotdogs_cleaned,
calories = ifelse(calories < 90, med_cal, calories))
library(tidyverse)
library(readxl) # считывание данных в формате Excel
library(stringr) # операции со строками
library(tidyverse)
library(readxl) # считывание данных в формате Excel
library(stringr) # операции со строками
read_excel(sheet = "data")
read_excel(path = "\otp_bank.xlsx", sheet = "data")
read_excel(path = "\otp_bank.xlsx", sheet = "data")
read_excel(path = "otp_bank.xlsx", sheet = "data")
read_excel(path = "otp_bank.xlsx", sheet= "fields")
otp <- read_excel(path = "otp_bank.xlsx", sheet = "data")
fields <- read_excel(path = "otp_bank.xlsx", sheet= "fields")
View(fields)
summary(otp)
head(summary(otp))
summary(otp$target, otp$age, otp$gender)
summary(otp$target)
summary(otp$age, otp$gender)
summary(otp$target)
summary(otp$age)
summary (otp$gender)
head(summary(otp$target))
summary(otp$age)
summary (otp$gender)
head(summary(otp$target))
head(summary(otp$age))
summary (otp$gender)
